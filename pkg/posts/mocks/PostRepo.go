// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	forms "redditclone/pkg/forms"

	mock "github.com/stretchr/testify/mock"

	posts "redditclone/pkg/posts"

	testing "testing"
)

// PostRepo is an autogenerated mock type for the PostRepo type
type PostRepo struct {
	mock.Mock
}

// Add provides a mock function with given fields: post
func (_m *PostRepo) Add(post *posts.Post) error {
	ret := _m.Called(post)

	var r0 error
	if rf, ok := ret.Get(0).(func(*posts.Post) error); ok {
		r0 = rf(post)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DecreaseVote provides a mock function with given fields: fd, post
func (_m *PostRepo) DecreaseVote(fd *forms.VoteForm, post *posts.Post) *posts.Post {
	ret := _m.Called(fd, post)

	var r0 *posts.Post
	if rf, ok := ret.Get(0).(func(*forms.VoteForm, *posts.Post) *posts.Post); ok {
		r0 = rf(fd, post)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*posts.Post)
		}
	}

	return r0
}

// Delete provides a mock function with given fields: id
func (_m *PostRepo) Delete(id string) bool {
	ret := _m.Called(id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetAll provides a mock function with given fields:
func (_m *PostRepo) GetAll() ([]*posts.Post, error) {
	ret := _m.Called()

	var r0 []*posts.Post
	if rf, ok := ret.Get(0).(func() []*posts.Post); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*posts.Post)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id
func (_m *PostRepo) GetByID(id string) (*posts.Post, error) {
	ret := _m.Called(id)

	var r0 *posts.Post
	if rf, ok := ret.Get(0).(func(string) *posts.Post); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*posts.Post)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLastId provides a mock function with given fields:
func (_m *PostRepo) GetLastId() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetPostsByUser provides a mock function with given fields: author
func (_m *PostRepo) GetPostsByUser(author forms.UserForm) ([]*posts.Post, error) {
	ret := _m.Called(author)

	var r0 []*posts.Post
	if rf, ok := ret.Get(0).(func(forms.UserForm) []*posts.Post); ok {
		r0 = rf(author)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*posts.Post)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(forms.UserForm) error); ok {
		r1 = rf(author)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPostsCategory provides a mock function with given fields: category
func (_m *PostRepo) GetPostsCategory(category string) ([]*posts.Post, error) {
	ret := _m.Called(category)

	var r0 []*posts.Post
	if rf, ok := ret.Get(0).(func(string) []*posts.Post); ok {
		r0 = rf(category)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*posts.Post)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(category)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IncreaseViews provides a mock function with given fields: newPost
func (_m *PostRepo) IncreaseViews(newPost *posts.Post) {
	_m.Called(newPost)
}

// IncreaseVote provides a mock function with given fields: fd, post
func (_m *PostRepo) IncreaseVote(fd *forms.VoteForm, post *posts.Post) *posts.Post {
	ret := _m.Called(fd, post)

	var r0 *posts.Post
	if rf, ok := ret.Get(0).(func(*forms.VoteForm, *posts.Post) *posts.Post); ok {
		r0 = rf(fd, post)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*posts.Post)
		}
	}

	return r0
}

// Update provides a mock function with given fields: post
func (_m *PostRepo) Update(post *posts.Post) (*posts.Post, error) {
	ret := _m.Called(post)

	var r0 *posts.Post
	if rf, ok := ret.Get(0).(func(*posts.Post) *posts.Post); ok {
		r0 = rf(post)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*posts.Post)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*posts.Post) error); ok {
		r1 = rf(post)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPostRepo creates a new instance of PostRepo. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewPostRepo(t testing.TB) *PostRepo {
	mock := &PostRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
